name: Terraform Deployment

on:
  push:
    branches:
      - dev
      - staging
      - release  # release = production

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      id-token: write      # Required for OIDC auth
      contents: read       # Required to checkout repo

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Set Terraform Workspace
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Running on branch: $BRANCH_NAME"

          if [ "$BRANCH_NAME" == "dev" ]; then
            echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" == "staging" ]; then
            echo "TF_WORKSPACE=staging" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" == "release" ]; then
            echo "TF_WORKSPACE=prod" >> $GITHUB_ENV
          else
            echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          #role-to-assume: arn:aws:iam::253490770638:role/GitHubTerraformRole
          #aws-region: ap-south-1

      - name: Terraform Init
        run: terraform init -input=false

      - name: Select Terraform Workspace
        run: |
          terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply (non-prod)
        if: github.ref != 'refs/heads/release'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Apply (prod)
        if: github.ref == 'refs/heads/release'
        run: terraform apply -input=false
